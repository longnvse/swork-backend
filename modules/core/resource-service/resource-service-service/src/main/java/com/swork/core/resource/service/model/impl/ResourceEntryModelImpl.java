/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.swork.core.resource.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.swork.core.resource.service.model.ResourceEntry;
import com.swork.core.resource.service.model.ResourceEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ResourceEntry service. Represents a row in the &quot;SW_Resource&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ResourceEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResourceEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ResourceEntryImpl
 * @generated
 */
public class ResourceEntryModelImpl
	extends BaseModelImpl<ResourceEntry> implements ResourceEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a resource entry model instance should use the <code>ResourceEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SW_Resource";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"resourceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"accountId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"businessId", Types.BIGINT}, {"modifiedId", Types.BIGINT},
		{"workId", Types.BIGINT}, {"phaseId", Types.BIGINT},
		{"projectId", Types.BIGINT}, {"resourceTypeId", Types.BIGINT},
		{"resourceTypeName", Types.VARCHAR}, {"teamId", Types.BIGINT},
		{"teamName", Types.VARCHAR}, {"quantity", Types.BIGINT},
		{"unit", Types.VARCHAR}, {"dateResource", Types.TIMESTAMP},
		{"totalAmount", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("businessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resourceTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resourceTypeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("teamId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teamName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateResource", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SW_Resource (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,resourceId LONG not null primary key,groupId LONG,companyId LONG,accountId LONG,createDate DATE null,modifiedDate DATE null,businessId LONG,modifiedId LONG,workId LONG,phaseId LONG,projectId LONG,resourceTypeId LONG,resourceTypeName VARCHAR(75) null,teamId LONG,teamName VARCHAR(75) null,quantity LONG,unit VARCHAR(75) null,dateResource DATE null,totalAmount LONG)";

	public static final String TABLE_SQL_DROP = "drop table SW_Resource";

	public static final String ORDER_BY_JPQL =
		" ORDER BY resourceEntry.resourceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SW_Resource.resourceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSINESSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHASEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEAMID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WORKID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RESOURCEID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ResourceEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _resourceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setResourceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _resourceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ResourceEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ResourceEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ResourceEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ResourceEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ResourceEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ResourceEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ResourceEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ResourceEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ResourceEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ResourceEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ResourceEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ResourceEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ResourceEntry.class.getClassLoader(), ResourceEntry.class,
			ModelWrapper.class);

		try {
			Constructor<ResourceEntry> constructor =
				(Constructor<ResourceEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ResourceEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ResourceEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ResourceEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ResourceEntry, Object>>();
		Map<String, BiConsumer<ResourceEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ResourceEntry, ?>>();

		attributeGetterFunctions.put("uuid", ResourceEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ResourceEntry, String>)ResourceEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", ResourceEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<ResourceEntry, String>)
				ResourceEntry::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"resourceId", ResourceEntry::getResourceId);
		attributeSetterBiConsumers.put(
			"resourceId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setResourceId);
		attributeGetterFunctions.put("groupId", ResourceEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setGroupId);
		attributeGetterFunctions.put("companyId", ResourceEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setCompanyId);
		attributeGetterFunctions.put("accountId", ResourceEntry::getAccountId);
		attributeSetterBiConsumers.put(
			"accountId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setAccountId);
		attributeGetterFunctions.put(
			"createDate", ResourceEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ResourceEntry, Date>)ResourceEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ResourceEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ResourceEntry, Date>)ResourceEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"businessId", ResourceEntry::getBusinessId);
		attributeSetterBiConsumers.put(
			"businessId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setBusinessId);
		attributeGetterFunctions.put(
			"modifiedId", ResourceEntry::getModifiedId);
		attributeSetterBiConsumers.put(
			"modifiedId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setModifiedId);
		attributeGetterFunctions.put("workId", ResourceEntry::getWorkId);
		attributeSetterBiConsumers.put(
			"workId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setWorkId);
		attributeGetterFunctions.put("phaseId", ResourceEntry::getPhaseId);
		attributeSetterBiConsumers.put(
			"phaseId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setPhaseId);
		attributeGetterFunctions.put("projectId", ResourceEntry::getProjectId);
		attributeSetterBiConsumers.put(
			"projectId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setProjectId);
		attributeGetterFunctions.put(
			"resourceTypeId", ResourceEntry::getResourceTypeId);
		attributeSetterBiConsumers.put(
			"resourceTypeId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setResourceTypeId);
		attributeGetterFunctions.put(
			"resourceTypeName", ResourceEntry::getResourceTypeName);
		attributeSetterBiConsumers.put(
			"resourceTypeName",
			(BiConsumer<ResourceEntry, String>)
				ResourceEntry::setResourceTypeName);
		attributeGetterFunctions.put("teamId", ResourceEntry::getTeamId);
		attributeSetterBiConsumers.put(
			"teamId",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setTeamId);
		attributeGetterFunctions.put("teamName", ResourceEntry::getTeamName);
		attributeSetterBiConsumers.put(
			"teamName",
			(BiConsumer<ResourceEntry, String>)ResourceEntry::setTeamName);
		attributeGetterFunctions.put("quantity", ResourceEntry::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setQuantity);
		attributeGetterFunctions.put("unit", ResourceEntry::getUnit);
		attributeSetterBiConsumers.put(
			"unit", (BiConsumer<ResourceEntry, String>)ResourceEntry::setUnit);
		attributeGetterFunctions.put(
			"dateResource", ResourceEntry::getDateResource);
		attributeSetterBiConsumers.put(
			"dateResource",
			(BiConsumer<ResourceEntry, Date>)ResourceEntry::setDateResource);
		attributeGetterFunctions.put(
			"totalAmount", ResourceEntry::getTotalAmount);
		attributeSetterBiConsumers.put(
			"totalAmount",
			(BiConsumer<ResourceEntry, Long>)ResourceEntry::setTotalAmount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getResourceId() {
		return _resourceId;
	}

	@Override
	public void setResourceId(long resourceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resourceId = resourceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountId = accountId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getBusinessId() {
		return _businessId;
	}

	@Override
	public void setBusinessId(long businessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessId = businessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBusinessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("businessId"));
	}

	@Override
	public long getModifiedId() {
		return _modifiedId;
	}

	@Override
	public void setModifiedId(long modifiedId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedId = modifiedId;
	}

	@Override
	public Long getWorkId() {
		return _workId;
	}

	@Override
	public void setWorkId(Long workId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workId = workId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalWorkId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("workId"));
	}

	@Override
	public Long getPhaseId() {
		return _phaseId;
	}

	@Override
	public void setPhaseId(Long phaseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phaseId = phaseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalPhaseId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("phaseId"));
	}

	@Override
	public Long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(Long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	@Override
	public long getResourceTypeId() {
		return _resourceTypeId;
	}

	@Override
	public void setResourceTypeId(long resourceTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resourceTypeId = resourceTypeId;
	}

	@Override
	public String getResourceTypeName() {
		if (_resourceTypeName == null) {
			return "";
		}
		else {
			return _resourceTypeName;
		}
	}

	@Override
	public void setResourceTypeName(String resourceTypeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resourceTypeName = resourceTypeName;
	}

	@Override
	public long getTeamId() {
		return _teamId;
	}

	@Override
	public void setTeamId(long teamId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teamId = teamId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTeamId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("teamId"));
	}

	@Override
	public String getTeamName() {
		if (_teamName == null) {
			return "";
		}
		else {
			return _teamName;
		}
	}

	@Override
	public void setTeamName(String teamName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teamName = teamName;
	}

	@Override
	public long getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(long quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@Override
	public String getUnit() {
		if (_unit == null) {
			return "";
		}
		else {
			return _unit;
		}
	}

	@Override
	public void setUnit(String unit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unit = unit;
	}

	@Override
	public Date getDateResource() {
		return _dateResource;
	}

	@Override
	public void setDateResource(Date dateResource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateResource = dateResource;
	}

	@Override
	public Long getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(Long totalAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAmount = totalAmount;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ResourceEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ResourceEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ResourceEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ResourceEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResourceEntryImpl resourceEntryImpl = new ResourceEntryImpl();

		resourceEntryImpl.setUuid(getUuid());
		resourceEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		resourceEntryImpl.setResourceId(getResourceId());
		resourceEntryImpl.setGroupId(getGroupId());
		resourceEntryImpl.setCompanyId(getCompanyId());
		resourceEntryImpl.setAccountId(getAccountId());
		resourceEntryImpl.setCreateDate(getCreateDate());
		resourceEntryImpl.setModifiedDate(getModifiedDate());
		resourceEntryImpl.setBusinessId(getBusinessId());
		resourceEntryImpl.setModifiedId(getModifiedId());
		resourceEntryImpl.setWorkId(getWorkId());
		resourceEntryImpl.setPhaseId(getPhaseId());
		resourceEntryImpl.setProjectId(getProjectId());
		resourceEntryImpl.setResourceTypeId(getResourceTypeId());
		resourceEntryImpl.setResourceTypeName(getResourceTypeName());
		resourceEntryImpl.setTeamId(getTeamId());
		resourceEntryImpl.setTeamName(getTeamName());
		resourceEntryImpl.setQuantity(getQuantity());
		resourceEntryImpl.setUnit(getUnit());
		resourceEntryImpl.setDateResource(getDateResource());
		resourceEntryImpl.setTotalAmount(getTotalAmount());

		resourceEntryImpl.resetOriginalValues();

		return resourceEntryImpl;
	}

	@Override
	public ResourceEntry cloneWithOriginalValues() {
		ResourceEntryImpl resourceEntryImpl = new ResourceEntryImpl();

		resourceEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		resourceEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		resourceEntryImpl.setResourceId(
			this.<Long>getColumnOriginalValue("resourceId"));
		resourceEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		resourceEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		resourceEntryImpl.setAccountId(
			this.<Long>getColumnOriginalValue("accountId"));
		resourceEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		resourceEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		resourceEntryImpl.setBusinessId(
			this.<Long>getColumnOriginalValue("businessId"));
		resourceEntryImpl.setModifiedId(
			this.<Long>getColumnOriginalValue("modifiedId"));
		resourceEntryImpl.setWorkId(
			this.<Long>getColumnOriginalValue("workId"));
		resourceEntryImpl.setPhaseId(
			this.<Long>getColumnOriginalValue("phaseId"));
		resourceEntryImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));
		resourceEntryImpl.setResourceTypeId(
			this.<Long>getColumnOriginalValue("resourceTypeId"));
		resourceEntryImpl.setResourceTypeName(
			this.<String>getColumnOriginalValue("resourceTypeName"));
		resourceEntryImpl.setTeamId(
			this.<Long>getColumnOriginalValue("teamId"));
		resourceEntryImpl.setTeamName(
			this.<String>getColumnOriginalValue("teamName"));
		resourceEntryImpl.setQuantity(
			this.<Long>getColumnOriginalValue("quantity"));
		resourceEntryImpl.setUnit(this.<String>getColumnOriginalValue("unit"));
		resourceEntryImpl.setDateResource(
			this.<Date>getColumnOriginalValue("dateResource"));
		resourceEntryImpl.setTotalAmount(
			this.<Long>getColumnOriginalValue("totalAmount"));

		return resourceEntryImpl;
	}

	@Override
	public int compareTo(ResourceEntry resourceEntry) {
		long primaryKey = resourceEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ResourceEntry)) {
			return false;
		}

		ResourceEntry resourceEntry = (ResourceEntry)object;

		long primaryKey = resourceEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ResourceEntry> toCacheModel() {
		ResourceEntryCacheModel resourceEntryCacheModel =
			new ResourceEntryCacheModel();

		resourceEntryCacheModel.uuid = getUuid();

		String uuid = resourceEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			resourceEntryCacheModel.uuid = null;
		}

		resourceEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			resourceEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			resourceEntryCacheModel.externalReferenceCode = null;
		}

		resourceEntryCacheModel.resourceId = getResourceId();

		resourceEntryCacheModel.groupId = getGroupId();

		resourceEntryCacheModel.companyId = getCompanyId();

		resourceEntryCacheModel.accountId = getAccountId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			resourceEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			resourceEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			resourceEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			resourceEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		resourceEntryCacheModel.businessId = getBusinessId();

		resourceEntryCacheModel.modifiedId = getModifiedId();

		Long workId = getWorkId();

		if (workId != null) {
			resourceEntryCacheModel.workId = workId;
		}

		Long phaseId = getPhaseId();

		if (phaseId != null) {
			resourceEntryCacheModel.phaseId = phaseId;
		}

		Long projectId = getProjectId();

		if (projectId != null) {
			resourceEntryCacheModel.projectId = projectId;
		}

		resourceEntryCacheModel.resourceTypeId = getResourceTypeId();

		resourceEntryCacheModel.resourceTypeName = getResourceTypeName();

		String resourceTypeName = resourceEntryCacheModel.resourceTypeName;

		if ((resourceTypeName != null) && (resourceTypeName.length() == 0)) {
			resourceEntryCacheModel.resourceTypeName = null;
		}

		resourceEntryCacheModel.teamId = getTeamId();

		resourceEntryCacheModel.teamName = getTeamName();

		String teamName = resourceEntryCacheModel.teamName;

		if ((teamName != null) && (teamName.length() == 0)) {
			resourceEntryCacheModel.teamName = null;
		}

		resourceEntryCacheModel.quantity = getQuantity();

		resourceEntryCacheModel.unit = getUnit();

		String unit = resourceEntryCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			resourceEntryCacheModel.unit = null;
		}

		Date dateResource = getDateResource();

		if (dateResource != null) {
			resourceEntryCacheModel.dateResource = dateResource.getTime();
		}
		else {
			resourceEntryCacheModel.dateResource = Long.MIN_VALUE;
		}

		Long totalAmount = getTotalAmount();

		if (totalAmount != null) {
			resourceEntryCacheModel.totalAmount = totalAmount;
		}

		return resourceEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ResourceEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ResourceEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ResourceEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ResourceEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ResourceEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ResourceEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ResourceEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ResourceEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ResourceEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _resourceId;
	private long _groupId;
	private long _companyId;
	private long _accountId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _businessId;
	private long _modifiedId;
	private Long _workId;
	private Long _phaseId;
	private Long _projectId;
	private long _resourceTypeId;
	private String _resourceTypeName;
	private long _teamId;
	private String _teamName;
	private long _quantity;
	private String _unit;
	private Date _dateResource;
	private Long _totalAmount;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ResourceEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ResourceEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("resourceId", _resourceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("accountId", _accountId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("businessId", _businessId);
		_columnOriginalValues.put("modifiedId", _modifiedId);
		_columnOriginalValues.put("workId", _workId);
		_columnOriginalValues.put("phaseId", _phaseId);
		_columnOriginalValues.put("projectId", _projectId);
		_columnOriginalValues.put("resourceTypeId", _resourceTypeId);
		_columnOriginalValues.put("resourceTypeName", _resourceTypeName);
		_columnOriginalValues.put("teamId", _teamId);
		_columnOriginalValues.put("teamName", _teamName);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("unit", _unit);
		_columnOriginalValues.put("dateResource", _dateResource);
		_columnOriginalValues.put("totalAmount", _totalAmount);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("resourceId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("accountId", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("businessId", 256L);

		columnBitmasks.put("modifiedId", 512L);

		columnBitmasks.put("workId", 1024L);

		columnBitmasks.put("phaseId", 2048L);

		columnBitmasks.put("projectId", 4096L);

		columnBitmasks.put("resourceTypeId", 8192L);

		columnBitmasks.put("resourceTypeName", 16384L);

		columnBitmasks.put("teamId", 32768L);

		columnBitmasks.put("teamName", 65536L);

		columnBitmasks.put("quantity", 131072L);

		columnBitmasks.put("unit", 262144L);

		columnBitmasks.put("dateResource", 524288L);

		columnBitmasks.put("totalAmount", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ResourceEntry _escapedModel;

}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.swork.core.phase.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.swork.core.phase.service.model.PhaseEntry;
import com.swork.core.phase.service.model.PhaseEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PhaseEntry service. Represents a row in the &quot;SW_Phase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PhaseEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhaseEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PhaseEntryImpl
 * @generated
 */
public class PhaseEntryModelImpl
	extends BaseModelImpl<PhaseEntry> implements PhaseEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a phase entry model instance should use the <code>PhaseEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SW_Phase";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"phaseId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"creatorId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"businessId", Types.BIGINT}, {"modifiedId", Types.BIGINT},
		{"phaseName", Types.VARCHAR}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"status", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"progress", Types.BIGINT},
		{"projectId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("businessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phaseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("progress", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SW_Phase (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,phaseId LONG not null primary key,groupId LONG,companyId LONG,creatorId LONG,createDate DATE null,modifiedDate DATE null,businessId LONG,modifiedId LONG,phaseName VARCHAR(100) null,startDate DATE null,endDate DATE null,status VARCHAR(75) null,description VARCHAR(500) null,progress LONG,projectId LONG)";

	public static final String TABLE_SQL_DROP = "drop table SW_Phase";

	public static final String ORDER_BY_JPQL =
		" ORDER BY phaseEntry.phaseId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY SW_Phase.phaseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSINESSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHASENAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHASEID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PhaseEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _phaseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPhaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _phaseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PhaseEntry.class;
	}

	@Override
	public String getModelClassName() {
		return PhaseEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PhaseEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PhaseEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhaseEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((PhaseEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PhaseEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PhaseEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PhaseEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PhaseEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PhaseEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PhaseEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PhaseEntry.class.getClassLoader(), PhaseEntry.class,
			ModelWrapper.class);

		try {
			Constructor<PhaseEntry> constructor =
				(Constructor<PhaseEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PhaseEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PhaseEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PhaseEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PhaseEntry, Object>>();
		Map<String, BiConsumer<PhaseEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PhaseEntry, ?>>();

		attributeGetterFunctions.put("uuid", PhaseEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<PhaseEntry, String>)PhaseEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", PhaseEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<PhaseEntry, String>)
				PhaseEntry::setExternalReferenceCode);
		attributeGetterFunctions.put("phaseId", PhaseEntry::getPhaseId);
		attributeSetterBiConsumers.put(
			"phaseId", (BiConsumer<PhaseEntry, Long>)PhaseEntry::setPhaseId);
		attributeGetterFunctions.put("groupId", PhaseEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<PhaseEntry, Long>)PhaseEntry::setGroupId);
		attributeGetterFunctions.put("companyId", PhaseEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PhaseEntry, Long>)PhaseEntry::setCompanyId);
		attributeGetterFunctions.put("creatorId", PhaseEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<PhaseEntry, Long>)PhaseEntry::setCreatorId);
		attributeGetterFunctions.put("createDate", PhaseEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PhaseEntry, Date>)PhaseEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PhaseEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PhaseEntry, Date>)PhaseEntry::setModifiedDate);
		attributeGetterFunctions.put("businessId", PhaseEntry::getBusinessId);
		attributeSetterBiConsumers.put(
			"businessId",
			(BiConsumer<PhaseEntry, Long>)PhaseEntry::setBusinessId);
		attributeGetterFunctions.put("modifiedId", PhaseEntry::getModifiedId);
		attributeSetterBiConsumers.put(
			"modifiedId",
			(BiConsumer<PhaseEntry, Long>)PhaseEntry::setModifiedId);
		attributeGetterFunctions.put("phaseName", PhaseEntry::getPhaseName);
		attributeSetterBiConsumers.put(
			"phaseName",
			(BiConsumer<PhaseEntry, String>)PhaseEntry::setPhaseName);
		attributeGetterFunctions.put("startDate", PhaseEntry::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<PhaseEntry, Date>)PhaseEntry::setStartDate);
		attributeGetterFunctions.put("endDate", PhaseEntry::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate", (BiConsumer<PhaseEntry, Date>)PhaseEntry::setEndDate);
		attributeGetterFunctions.put("status", PhaseEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<PhaseEntry, String>)PhaseEntry::setStatus);
		attributeGetterFunctions.put("description", PhaseEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<PhaseEntry, String>)PhaseEntry::setDescription);
		attributeGetterFunctions.put("progress", PhaseEntry::getProgress);
		attributeSetterBiConsumers.put(
			"progress", (BiConsumer<PhaseEntry, Long>)PhaseEntry::setProgress);
		attributeGetterFunctions.put("projectId", PhaseEntry::getProjectId);
		attributeSetterBiConsumers.put(
			"projectId",
			(BiConsumer<PhaseEntry, Long>)PhaseEntry::setProjectId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getPhaseId() {
		return _phaseId;
	}

	@Override
	public void setPhaseId(long phaseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phaseId = phaseId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getBusinessId() {
		return _businessId;
	}

	@Override
	public void setBusinessId(long businessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessId = businessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBusinessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("businessId"));
	}

	@Override
	public long getModifiedId() {
		return _modifiedId;
	}

	@Override
	public void setModifiedId(long modifiedId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedId = modifiedId;
	}

	@Override
	public String getPhaseName() {
		if (_phaseName == null) {
			return "";
		}
		else {
			return _phaseName;
		}
	}

	@Override
	public void setPhaseName(String phaseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phaseName = phaseName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPhaseName() {
		return getColumnOriginalValue("phaseName");
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public long getProgress() {
		return _progress;
	}

	@Override
	public void setProgress(long progress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_progress = progress;
	}

	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(PhaseEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PhaseEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PhaseEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PhaseEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PhaseEntryImpl phaseEntryImpl = new PhaseEntryImpl();

		phaseEntryImpl.setUuid(getUuid());
		phaseEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		phaseEntryImpl.setPhaseId(getPhaseId());
		phaseEntryImpl.setGroupId(getGroupId());
		phaseEntryImpl.setCompanyId(getCompanyId());
		phaseEntryImpl.setCreatorId(getCreatorId());
		phaseEntryImpl.setCreateDate(getCreateDate());
		phaseEntryImpl.setModifiedDate(getModifiedDate());
		phaseEntryImpl.setBusinessId(getBusinessId());
		phaseEntryImpl.setModifiedId(getModifiedId());
		phaseEntryImpl.setPhaseName(getPhaseName());
		phaseEntryImpl.setStartDate(getStartDate());
		phaseEntryImpl.setEndDate(getEndDate());
		phaseEntryImpl.setStatus(getStatus());
		phaseEntryImpl.setDescription(getDescription());
		phaseEntryImpl.setProgress(getProgress());
		phaseEntryImpl.setProjectId(getProjectId());

		phaseEntryImpl.resetOriginalValues();

		return phaseEntryImpl;
	}

	@Override
	public PhaseEntry cloneWithOriginalValues() {
		PhaseEntryImpl phaseEntryImpl = new PhaseEntryImpl();

		phaseEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		phaseEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		phaseEntryImpl.setPhaseId(this.<Long>getColumnOriginalValue("phaseId"));
		phaseEntryImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		phaseEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		phaseEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		phaseEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		phaseEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		phaseEntryImpl.setBusinessId(
			this.<Long>getColumnOriginalValue("businessId"));
		phaseEntryImpl.setModifiedId(
			this.<Long>getColumnOriginalValue("modifiedId"));
		phaseEntryImpl.setPhaseName(
			this.<String>getColumnOriginalValue("phaseName"));
		phaseEntryImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		phaseEntryImpl.setEndDate(this.<Date>getColumnOriginalValue("endDate"));
		phaseEntryImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		phaseEntryImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		phaseEntryImpl.setProgress(
			this.<Long>getColumnOriginalValue("progress"));
		phaseEntryImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));

		return phaseEntryImpl;
	}

	@Override
	public int compareTo(PhaseEntry phaseEntry) {
		long primaryKey = phaseEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PhaseEntry)) {
			return false;
		}

		PhaseEntry phaseEntry = (PhaseEntry)object;

		long primaryKey = phaseEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PhaseEntry> toCacheModel() {
		PhaseEntryCacheModel phaseEntryCacheModel = new PhaseEntryCacheModel();

		phaseEntryCacheModel.uuid = getUuid();

		String uuid = phaseEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			phaseEntryCacheModel.uuid = null;
		}

		phaseEntryCacheModel.externalReferenceCode = getExternalReferenceCode();

		String externalReferenceCode =
			phaseEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			phaseEntryCacheModel.externalReferenceCode = null;
		}

		phaseEntryCacheModel.phaseId = getPhaseId();

		phaseEntryCacheModel.groupId = getGroupId();

		phaseEntryCacheModel.companyId = getCompanyId();

		phaseEntryCacheModel.creatorId = getCreatorId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			phaseEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			phaseEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			phaseEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			phaseEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		phaseEntryCacheModel.businessId = getBusinessId();

		phaseEntryCacheModel.modifiedId = getModifiedId();

		phaseEntryCacheModel.phaseName = getPhaseName();

		String phaseName = phaseEntryCacheModel.phaseName;

		if ((phaseName != null) && (phaseName.length() == 0)) {
			phaseEntryCacheModel.phaseName = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			phaseEntryCacheModel.startDate = startDate.getTime();
		}
		else {
			phaseEntryCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			phaseEntryCacheModel.endDate = endDate.getTime();
		}
		else {
			phaseEntryCacheModel.endDate = Long.MIN_VALUE;
		}

		phaseEntryCacheModel.status = getStatus();

		String status = phaseEntryCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			phaseEntryCacheModel.status = null;
		}

		phaseEntryCacheModel.description = getDescription();

		String description = phaseEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			phaseEntryCacheModel.description = null;
		}

		phaseEntryCacheModel.progress = getProgress();

		phaseEntryCacheModel.projectId = getProjectId();

		return phaseEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PhaseEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PhaseEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhaseEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PhaseEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PhaseEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PhaseEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhaseEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PhaseEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PhaseEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _phaseId;
	private long _groupId;
	private long _companyId;
	private long _creatorId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _businessId;
	private long _modifiedId;
	private String _phaseName;
	private Date _startDate;
	private Date _endDate;
	private String _status;
	private String _description;
	private long _progress;
	private long _projectId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PhaseEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PhaseEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("phaseId", _phaseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("businessId", _businessId);
		_columnOriginalValues.put("modifiedId", _modifiedId);
		_columnOriginalValues.put("phaseName", _phaseName);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("progress", _progress);
		_columnOriginalValues.put("projectId", _projectId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("phaseId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("creatorId", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("businessId", 256L);

		columnBitmasks.put("modifiedId", 512L);

		columnBitmasks.put("phaseName", 1024L);

		columnBitmasks.put("startDate", 2048L);

		columnBitmasks.put("endDate", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("description", 16384L);

		columnBitmasks.put("progress", 32768L);

		columnBitmasks.put("projectId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PhaseEntry _escapedModel;

}
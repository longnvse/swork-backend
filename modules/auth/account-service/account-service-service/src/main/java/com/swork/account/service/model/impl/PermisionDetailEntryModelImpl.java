/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.swork.account.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.swork.account.service.model.PermisionDetailEntry;
import com.swork.account.service.model.PermisionDetailEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PermisionDetailEntry service. Represents a row in the &quot;SW_PermisionDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PermisionDetailEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermisionDetailEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PermisionDetailEntryImpl
 * @generated
 */
public class PermisionDetailEntryModelImpl
	extends BaseModelImpl<PermisionDetailEntry>
	implements PermisionDetailEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permision detail entry model instance should use the <code>PermisionDetailEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SW_PermisionDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"permisionId", Types.BIGINT}, {"actionCode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("permisionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SW_PermisionDetail (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,id_ LONG not null primary key,companyId LONG,permisionId LONG,actionCode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table SW_PermisionDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY permisionDetailEntry.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SW_PermisionDetail.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PermisionDetailEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PermisionDetailEntry.class;
	}

	@Override
	public String getModelClassName() {
		return PermisionDetailEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PermisionDetailEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PermisionDetailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermisionDetailEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PermisionDetailEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PermisionDetailEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PermisionDetailEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PermisionDetailEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PermisionDetailEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PermisionDetailEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PermisionDetailEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PermisionDetailEntry.class.getClassLoader(),
			PermisionDetailEntry.class, ModelWrapper.class);

		try {
			Constructor<PermisionDetailEntry> constructor =
				(Constructor<PermisionDetailEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PermisionDetailEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PermisionDetailEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PermisionDetailEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PermisionDetailEntry, Object>>();
		Map<String, BiConsumer<PermisionDetailEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<PermisionDetailEntry, ?>>();

		attributeGetterFunctions.put("uuid", PermisionDetailEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<PermisionDetailEntry, String>)
				PermisionDetailEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode",
			PermisionDetailEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<PermisionDetailEntry, String>)
				PermisionDetailEntry::setExternalReferenceCode);
		attributeGetterFunctions.put("id", PermisionDetailEntry::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<PermisionDetailEntry, Long>)
				PermisionDetailEntry::setId);
		attributeGetterFunctions.put(
			"companyId", PermisionDetailEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PermisionDetailEntry, Long>)
				PermisionDetailEntry::setCompanyId);
		attributeGetterFunctions.put(
			"permisionId", PermisionDetailEntry::getPermisionId);
		attributeSetterBiConsumers.put(
			"permisionId",
			(BiConsumer<PermisionDetailEntry, Long>)
				PermisionDetailEntry::setPermisionId);
		attributeGetterFunctions.put(
			"actionCode", PermisionDetailEntry::getActionCode);
		attributeSetterBiConsumers.put(
			"actionCode",
			(BiConsumer<PermisionDetailEntry, String>)
				PermisionDetailEntry::setActionCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getPermisionId() {
		return _permisionId;
	}

	@Override
	public void setPermisionId(long permisionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permisionId = permisionId;
	}

	@Override
	public String getActionCode() {
		if (_actionCode == null) {
			return "";
		}
		else {
			return _actionCode;
		}
	}

	@Override
	public void setActionCode(String actionCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actionCode = actionCode;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PermisionDetailEntry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PermisionDetailEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PermisionDetailEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PermisionDetailEntryImpl permisionDetailEntryImpl =
			new PermisionDetailEntryImpl();

		permisionDetailEntryImpl.setUuid(getUuid());
		permisionDetailEntryImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		permisionDetailEntryImpl.setId(getId());
		permisionDetailEntryImpl.setCompanyId(getCompanyId());
		permisionDetailEntryImpl.setPermisionId(getPermisionId());
		permisionDetailEntryImpl.setActionCode(getActionCode());

		permisionDetailEntryImpl.resetOriginalValues();

		return permisionDetailEntryImpl;
	}

	@Override
	public PermisionDetailEntry cloneWithOriginalValues() {
		PermisionDetailEntryImpl permisionDetailEntryImpl =
			new PermisionDetailEntryImpl();

		permisionDetailEntryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		permisionDetailEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		permisionDetailEntryImpl.setId(
			this.<Long>getColumnOriginalValue("id_"));
		permisionDetailEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		permisionDetailEntryImpl.setPermisionId(
			this.<Long>getColumnOriginalValue("permisionId"));
		permisionDetailEntryImpl.setActionCode(
			this.<String>getColumnOriginalValue("actionCode"));

		return permisionDetailEntryImpl;
	}

	@Override
	public int compareTo(PermisionDetailEntry permisionDetailEntry) {
		long primaryKey = permisionDetailEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PermisionDetailEntry)) {
			return false;
		}

		PermisionDetailEntry permisionDetailEntry =
			(PermisionDetailEntry)object;

		long primaryKey = permisionDetailEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PermisionDetailEntry> toCacheModel() {
		PermisionDetailEntryCacheModel permisionDetailEntryCacheModel =
			new PermisionDetailEntryCacheModel();

		permisionDetailEntryCacheModel.uuid = getUuid();

		String uuid = permisionDetailEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			permisionDetailEntryCacheModel.uuid = null;
		}

		permisionDetailEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			permisionDetailEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			permisionDetailEntryCacheModel.externalReferenceCode = null;
		}

		permisionDetailEntryCacheModel.id = getId();

		permisionDetailEntryCacheModel.companyId = getCompanyId();

		permisionDetailEntryCacheModel.permisionId = getPermisionId();

		permisionDetailEntryCacheModel.actionCode = getActionCode();

		String actionCode = permisionDetailEntryCacheModel.actionCode;

		if ((actionCode != null) && (actionCode.length() == 0)) {
			permisionDetailEntryCacheModel.actionCode = null;
		}

		return permisionDetailEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PermisionDetailEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PermisionDetailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermisionDetailEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PermisionDetailEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PermisionDetailEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PermisionDetailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermisionDetailEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((PermisionDetailEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PermisionDetailEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _id;
	private long _companyId;
	private long _permisionId;
	private String _actionCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PermisionDetailEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PermisionDetailEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("permisionId", _permisionId);
		_columnOriginalValues.put("actionCode", _actionCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("id_", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("permisionId", 16L);

		columnBitmasks.put("actionCode", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PermisionDetailEntry _escapedModel;

}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.swork.auth.login.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.swork.auth.login.service.model.TokenEntry;
import com.swork.auth.login.service.model.TokenEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TokenEntry service. Represents a row in the &quot;SW_TokenEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TokenEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TokenEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TokenEntryImpl
 * @generated
 */
public class TokenEntryModelImpl
	extends BaseModelImpl<TokenEntry> implements TokenEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a token entry model instance should use the <code>TokenEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SW_TokenEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"tokenId", Types.BIGINT},
		{"accountId", Types.BIGINT}, {"businessId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"refreshToken", Types.VARCHAR},
		{"expiryDate", Types.TIMESTAMP}, {"issuedDate", Types.TIMESTAMP},
		{"refreshedDate", Types.TIMESTAMP}, {"userAgent", Types.VARCHAR},
		{"clientIp", Types.VARCHAR}, {"firstLoginDate", Types.TIMESTAMP},
		{"sessionId", Types.VARCHAR}, {"remember", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tokenId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("businessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("refreshToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("issuedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("refreshedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userAgent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientIp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstLoginDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sessionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remember", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SW_TokenEntry (uuid_ VARCHAR(75) null,tokenId LONG not null primary key,accountId LONG,businessId LONG,userName VARCHAR(75) null,refreshToken VARCHAR(75) null,expiryDate DATE null,issuedDate DATE null,refreshedDate DATE null,userAgent VARCHAR(200) null,clientIp VARCHAR(75) null,firstLoginDate DATE null,sessionId VARCHAR(75) null,remember BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table SW_TokenEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tokenEntry.tokenId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SW_TokenEntry.tokenId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REFRESHTOKEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOKENID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TokenEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tokenId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTokenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tokenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TokenEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TokenEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TokenEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TokenEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TokenEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((TokenEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TokenEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TokenEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TokenEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TokenEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TokenEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TokenEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TokenEntry.class.getClassLoader(), TokenEntry.class,
			ModelWrapper.class);

		try {
			Constructor<TokenEntry> constructor =
				(Constructor<TokenEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TokenEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TokenEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TokenEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TokenEntry, Object>>();
		Map<String, BiConsumer<TokenEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TokenEntry, ?>>();

		attributeGetterFunctions.put("uuid", TokenEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<TokenEntry, String>)TokenEntry::setUuid);
		attributeGetterFunctions.put("tokenId", TokenEntry::getTokenId);
		attributeSetterBiConsumers.put(
			"tokenId", (BiConsumer<TokenEntry, Long>)TokenEntry::setTokenId);
		attributeGetterFunctions.put("accountId", TokenEntry::getAccountId);
		attributeSetterBiConsumers.put(
			"accountId",
			(BiConsumer<TokenEntry, Long>)TokenEntry::setAccountId);
		attributeGetterFunctions.put("businessId", TokenEntry::getBusinessId);
		attributeSetterBiConsumers.put(
			"businessId",
			(BiConsumer<TokenEntry, Long>)TokenEntry::setBusinessId);
		attributeGetterFunctions.put("userName", TokenEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TokenEntry, String>)TokenEntry::setUserName);
		attributeGetterFunctions.put(
			"refreshToken", TokenEntry::getRefreshToken);
		attributeSetterBiConsumers.put(
			"refreshToken",
			(BiConsumer<TokenEntry, String>)TokenEntry::setRefreshToken);
		attributeGetterFunctions.put("expiryDate", TokenEntry::getExpiryDate);
		attributeSetterBiConsumers.put(
			"expiryDate",
			(BiConsumer<TokenEntry, Date>)TokenEntry::setExpiryDate);
		attributeGetterFunctions.put("issuedDate", TokenEntry::getIssuedDate);
		attributeSetterBiConsumers.put(
			"issuedDate",
			(BiConsumer<TokenEntry, Date>)TokenEntry::setIssuedDate);
		attributeGetterFunctions.put(
			"refreshedDate", TokenEntry::getRefreshedDate);
		attributeSetterBiConsumers.put(
			"refreshedDate",
			(BiConsumer<TokenEntry, Date>)TokenEntry::setRefreshedDate);
		attributeGetterFunctions.put("userAgent", TokenEntry::getUserAgent);
		attributeSetterBiConsumers.put(
			"userAgent",
			(BiConsumer<TokenEntry, String>)TokenEntry::setUserAgent);
		attributeGetterFunctions.put("clientIp", TokenEntry::getClientIp);
		attributeSetterBiConsumers.put(
			"clientIp",
			(BiConsumer<TokenEntry, String>)TokenEntry::setClientIp);
		attributeGetterFunctions.put(
			"firstLoginDate", TokenEntry::getFirstLoginDate);
		attributeSetterBiConsumers.put(
			"firstLoginDate",
			(BiConsumer<TokenEntry, Date>)TokenEntry::setFirstLoginDate);
		attributeGetterFunctions.put("sessionId", TokenEntry::getSessionId);
		attributeSetterBiConsumers.put(
			"sessionId",
			(BiConsumer<TokenEntry, String>)TokenEntry::setSessionId);
		attributeGetterFunctions.put("remember", TokenEntry::getRemember);
		attributeSetterBiConsumers.put(
			"remember",
			(BiConsumer<TokenEntry, Boolean>)TokenEntry::setRemember);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getTokenId() {
		return _tokenId;
	}

	@Override
	public void setTokenId(long tokenId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tokenId = tokenId;
	}

	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountId = accountId;
	}

	@Override
	public long getBusinessId() {
		return _businessId;
	}

	@Override
	public void setBusinessId(long businessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessId = businessId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserName() {
		return getColumnOriginalValue("userName");
	}

	@Override
	public String getRefreshToken() {
		if (_refreshToken == null) {
			return "";
		}
		else {
			return _refreshToken;
		}
	}

	@Override
	public void setRefreshToken(String refreshToken) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_refreshToken = refreshToken;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRefreshToken() {
		return getColumnOriginalValue("refreshToken");
	}

	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiryDate = expiryDate;
	}

	@Override
	public Date getIssuedDate() {
		return _issuedDate;
	}

	@Override
	public void setIssuedDate(Date issuedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_issuedDate = issuedDate;
	}

	@Override
	public Date getRefreshedDate() {
		return _refreshedDate;
	}

	@Override
	public void setRefreshedDate(Date refreshedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_refreshedDate = refreshedDate;
	}

	@Override
	public String getUserAgent() {
		if (_userAgent == null) {
			return "";
		}
		else {
			return _userAgent;
		}
	}

	@Override
	public void setUserAgent(String userAgent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userAgent = userAgent;
	}

	@Override
	public String getClientIp() {
		if (_clientIp == null) {
			return "";
		}
		else {
			return _clientIp;
		}
	}

	@Override
	public void setClientIp(String clientIp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_clientIp = clientIp;
	}

	@Override
	public Date getFirstLoginDate() {
		return _firstLoginDate;
	}

	@Override
	public void setFirstLoginDate(Date firstLoginDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstLoginDate = firstLoginDate;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return "";
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sessionId = sessionId;
	}

	@Override
	public Boolean getRemember() {
		return _remember;
	}

	@Override
	public void setRemember(Boolean remember) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remember = remember;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TokenEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TokenEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TokenEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TokenEntryImpl tokenEntryImpl = new TokenEntryImpl();

		tokenEntryImpl.setUuid(getUuid());
		tokenEntryImpl.setTokenId(getTokenId());
		tokenEntryImpl.setAccountId(getAccountId());
		tokenEntryImpl.setBusinessId(getBusinessId());
		tokenEntryImpl.setUserName(getUserName());
		tokenEntryImpl.setRefreshToken(getRefreshToken());
		tokenEntryImpl.setExpiryDate(getExpiryDate());
		tokenEntryImpl.setIssuedDate(getIssuedDate());
		tokenEntryImpl.setRefreshedDate(getRefreshedDate());
		tokenEntryImpl.setUserAgent(getUserAgent());
		tokenEntryImpl.setClientIp(getClientIp());
		tokenEntryImpl.setFirstLoginDate(getFirstLoginDate());
		tokenEntryImpl.setSessionId(getSessionId());
		tokenEntryImpl.setRemember(getRemember());

		tokenEntryImpl.resetOriginalValues();

		return tokenEntryImpl;
	}

	@Override
	public TokenEntry cloneWithOriginalValues() {
		TokenEntryImpl tokenEntryImpl = new TokenEntryImpl();

		tokenEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tokenEntryImpl.setTokenId(this.<Long>getColumnOriginalValue("tokenId"));
		tokenEntryImpl.setAccountId(
			this.<Long>getColumnOriginalValue("accountId"));
		tokenEntryImpl.setBusinessId(
			this.<Long>getColumnOriginalValue("businessId"));
		tokenEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tokenEntryImpl.setRefreshToken(
			this.<String>getColumnOriginalValue("refreshToken"));
		tokenEntryImpl.setExpiryDate(
			this.<Date>getColumnOriginalValue("expiryDate"));
		tokenEntryImpl.setIssuedDate(
			this.<Date>getColumnOriginalValue("issuedDate"));
		tokenEntryImpl.setRefreshedDate(
			this.<Date>getColumnOriginalValue("refreshedDate"));
		tokenEntryImpl.setUserAgent(
			this.<String>getColumnOriginalValue("userAgent"));
		tokenEntryImpl.setClientIp(
			this.<String>getColumnOriginalValue("clientIp"));
		tokenEntryImpl.setFirstLoginDate(
			this.<Date>getColumnOriginalValue("firstLoginDate"));
		tokenEntryImpl.setSessionId(
			this.<String>getColumnOriginalValue("sessionId"));
		tokenEntryImpl.setRemember(
			this.<Boolean>getColumnOriginalValue("remember"));

		return tokenEntryImpl;
	}

	@Override
	public int compareTo(TokenEntry tokenEntry) {
		long primaryKey = tokenEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TokenEntry)) {
			return false;
		}

		TokenEntry tokenEntry = (TokenEntry)object;

		long primaryKey = tokenEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TokenEntry> toCacheModel() {
		TokenEntryCacheModel tokenEntryCacheModel = new TokenEntryCacheModel();

		tokenEntryCacheModel.uuid = getUuid();

		String uuid = tokenEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tokenEntryCacheModel.uuid = null;
		}

		tokenEntryCacheModel.tokenId = getTokenId();

		tokenEntryCacheModel.accountId = getAccountId();

		tokenEntryCacheModel.businessId = getBusinessId();

		tokenEntryCacheModel.userName = getUserName();

		String userName = tokenEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tokenEntryCacheModel.userName = null;
		}

		tokenEntryCacheModel.refreshToken = getRefreshToken();

		String refreshToken = tokenEntryCacheModel.refreshToken;

		if ((refreshToken != null) && (refreshToken.length() == 0)) {
			tokenEntryCacheModel.refreshToken = null;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			tokenEntryCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			tokenEntryCacheModel.expiryDate = Long.MIN_VALUE;
		}

		Date issuedDate = getIssuedDate();

		if (issuedDate != null) {
			tokenEntryCacheModel.issuedDate = issuedDate.getTime();
		}
		else {
			tokenEntryCacheModel.issuedDate = Long.MIN_VALUE;
		}

		Date refreshedDate = getRefreshedDate();

		if (refreshedDate != null) {
			tokenEntryCacheModel.refreshedDate = refreshedDate.getTime();
		}
		else {
			tokenEntryCacheModel.refreshedDate = Long.MIN_VALUE;
		}

		tokenEntryCacheModel.userAgent = getUserAgent();

		String userAgent = tokenEntryCacheModel.userAgent;

		if ((userAgent != null) && (userAgent.length() == 0)) {
			tokenEntryCacheModel.userAgent = null;
		}

		tokenEntryCacheModel.clientIp = getClientIp();

		String clientIp = tokenEntryCacheModel.clientIp;

		if ((clientIp != null) && (clientIp.length() == 0)) {
			tokenEntryCacheModel.clientIp = null;
		}

		Date firstLoginDate = getFirstLoginDate();

		if (firstLoginDate != null) {
			tokenEntryCacheModel.firstLoginDate = firstLoginDate.getTime();
		}
		else {
			tokenEntryCacheModel.firstLoginDate = Long.MIN_VALUE;
		}

		tokenEntryCacheModel.sessionId = getSessionId();

		String sessionId = tokenEntryCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			tokenEntryCacheModel.sessionId = null;
		}

		Boolean remember = getRemember();

		if (remember != null) {
			tokenEntryCacheModel.remember = remember;
		}

		return tokenEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TokenEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TokenEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TokenEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TokenEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TokenEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TokenEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TokenEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TokenEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TokenEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _tokenId;
	private long _accountId;
	private long _businessId;
	private String _userName;
	private String _refreshToken;
	private Date _expiryDate;
	private Date _issuedDate;
	private Date _refreshedDate;
	private String _userAgent;
	private String _clientIp;
	private Date _firstLoginDate;
	private String _sessionId;
	private Boolean _remember;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TokenEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TokenEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("tokenId", _tokenId);
		_columnOriginalValues.put("accountId", _accountId);
		_columnOriginalValues.put("businessId", _businessId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("refreshToken", _refreshToken);
		_columnOriginalValues.put("expiryDate", _expiryDate);
		_columnOriginalValues.put("issuedDate", _issuedDate);
		_columnOriginalValues.put("refreshedDate", _refreshedDate);
		_columnOriginalValues.put("userAgent", _userAgent);
		_columnOriginalValues.put("clientIp", _clientIp);
		_columnOriginalValues.put("firstLoginDate", _firstLoginDate);
		_columnOriginalValues.put("sessionId", _sessionId);
		_columnOriginalValues.put("remember", _remember);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("tokenId", 2L);

		columnBitmasks.put("accountId", 4L);

		columnBitmasks.put("businessId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("refreshToken", 32L);

		columnBitmasks.put("expiryDate", 64L);

		columnBitmasks.put("issuedDate", 128L);

		columnBitmasks.put("refreshedDate", 256L);

		columnBitmasks.put("userAgent", 512L);

		columnBitmasks.put("clientIp", 1024L);

		columnBitmasks.put("firstLoginDate", 2048L);

		columnBitmasks.put("sessionId", 4096L);

		columnBitmasks.put("remember", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TokenEntry _escapedModel;

}
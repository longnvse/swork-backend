/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.swork.checklist.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.swork.checklist.service.model.ChecklistHandlerEntry;
import com.swork.checklist.service.model.ChecklistHandlerEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ChecklistHandlerEntry service. Represents a row in the &quot;SW_ChecklistHandler&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ChecklistHandlerEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChecklistHandlerEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ChecklistHandlerEntryImpl
 * @generated
 */
public class ChecklistHandlerEntryModelImpl
	extends BaseModelImpl<ChecklistHandlerEntry>
	implements ChecklistHandlerEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a checklist handler entry model instance should use the <code>ChecklistHandlerEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SW_ChecklistHandler";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"checklistHandlerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"checkListId", Types.BIGINT},
		{"accId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checklistHandlerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("checkListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SW_ChecklistHandler (uuid_ VARCHAR(75) null,checklistHandlerId LONG not null primary key,groupId LONG,checkListId LONG,accId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table SW_ChecklistHandler";

	public static final String ORDER_BY_JPQL =
		" ORDER BY checklistHandlerEntry.checklistHandlerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SW_ChecklistHandler.checklistHandlerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CHECKLISTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CHECKLISTHANDLERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ChecklistHandlerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _checklistHandlerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChecklistHandlerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _checklistHandlerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChecklistHandlerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ChecklistHandlerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ChecklistHandlerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ChecklistHandlerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChecklistHandlerEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ChecklistHandlerEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ChecklistHandlerEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ChecklistHandlerEntry, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ChecklistHandlerEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ChecklistHandlerEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ChecklistHandlerEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ChecklistHandlerEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ChecklistHandlerEntry.class.getClassLoader(),
			ChecklistHandlerEntry.class, ModelWrapper.class);

		try {
			Constructor<ChecklistHandlerEntry> constructor =
				(Constructor<ChecklistHandlerEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ChecklistHandlerEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ChecklistHandlerEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ChecklistHandlerEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ChecklistHandlerEntry, Object>>();
		Map<String, BiConsumer<ChecklistHandlerEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ChecklistHandlerEntry, ?>>();

		attributeGetterFunctions.put("uuid", ChecklistHandlerEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ChecklistHandlerEntry, String>)
				ChecklistHandlerEntry::setUuid);
		attributeGetterFunctions.put(
			"checklistHandlerId", ChecklistHandlerEntry::getChecklistHandlerId);
		attributeSetterBiConsumers.put(
			"checklistHandlerId",
			(BiConsumer<ChecklistHandlerEntry, Long>)
				ChecklistHandlerEntry::setChecklistHandlerId);
		attributeGetterFunctions.put(
			"groupId", ChecklistHandlerEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ChecklistHandlerEntry, Long>)
				ChecklistHandlerEntry::setGroupId);
		attributeGetterFunctions.put(
			"checkListId", ChecklistHandlerEntry::getCheckListId);
		attributeSetterBiConsumers.put(
			"checkListId",
			(BiConsumer<ChecklistHandlerEntry, Long>)
				ChecklistHandlerEntry::setCheckListId);
		attributeGetterFunctions.put("accId", ChecklistHandlerEntry::getAccId);
		attributeSetterBiConsumers.put(
			"accId",
			(BiConsumer<ChecklistHandlerEntry, Long>)
				ChecklistHandlerEntry::setAccId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getChecklistHandlerId() {
		return _checklistHandlerId;
	}

	@Override
	public void setChecklistHandlerId(long checklistHandlerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checklistHandlerId = checklistHandlerId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public Long getCheckListId() {
		return _checkListId;
	}

	@Override
	public void setCheckListId(Long checkListId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkListId = checkListId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalCheckListId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("checkListId"));
	}

	@Override
	public Long getAccId() {
		return _accId;
	}

	@Override
	public void setAccId(Long accId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accId = accId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ChecklistHandlerEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ChecklistHandlerEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ChecklistHandlerEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChecklistHandlerEntryImpl checklistHandlerEntryImpl =
			new ChecklistHandlerEntryImpl();

		checklistHandlerEntryImpl.setUuid(getUuid());
		checklistHandlerEntryImpl.setChecklistHandlerId(
			getChecklistHandlerId());
		checklistHandlerEntryImpl.setGroupId(getGroupId());
		checklistHandlerEntryImpl.setCheckListId(getCheckListId());
		checklistHandlerEntryImpl.setAccId(getAccId());

		checklistHandlerEntryImpl.resetOriginalValues();

		return checklistHandlerEntryImpl;
	}

	@Override
	public ChecklistHandlerEntry cloneWithOriginalValues() {
		ChecklistHandlerEntryImpl checklistHandlerEntryImpl =
			new ChecklistHandlerEntryImpl();

		checklistHandlerEntryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		checklistHandlerEntryImpl.setChecklistHandlerId(
			this.<Long>getColumnOriginalValue("checklistHandlerId"));
		checklistHandlerEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		checklistHandlerEntryImpl.setCheckListId(
			this.<Long>getColumnOriginalValue("checkListId"));
		checklistHandlerEntryImpl.setAccId(
			this.<Long>getColumnOriginalValue("accId"));

		return checklistHandlerEntryImpl;
	}

	@Override
	public int compareTo(ChecklistHandlerEntry checklistHandlerEntry) {
		long primaryKey = checklistHandlerEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ChecklistHandlerEntry)) {
			return false;
		}

		ChecklistHandlerEntry checklistHandlerEntry =
			(ChecklistHandlerEntry)object;

		long primaryKey = checklistHandlerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ChecklistHandlerEntry> toCacheModel() {
		ChecklistHandlerEntryCacheModel checklistHandlerEntryCacheModel =
			new ChecklistHandlerEntryCacheModel();

		checklistHandlerEntryCacheModel.uuid = getUuid();

		String uuid = checklistHandlerEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			checklistHandlerEntryCacheModel.uuid = null;
		}

		checklistHandlerEntryCacheModel.checklistHandlerId =
			getChecklistHandlerId();

		checklistHandlerEntryCacheModel.groupId = getGroupId();

		Long checkListId = getCheckListId();

		if (checkListId != null) {
			checklistHandlerEntryCacheModel.checkListId = checkListId;
		}

		Long accId = getAccId();

		if (accId != null) {
			checklistHandlerEntryCacheModel.accId = accId;
		}

		return checklistHandlerEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ChecklistHandlerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ChecklistHandlerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChecklistHandlerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ChecklistHandlerEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ChecklistHandlerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ChecklistHandlerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChecklistHandlerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ChecklistHandlerEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ChecklistHandlerEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _checklistHandlerId;
	private long _groupId;
	private Long _checkListId;
	private Long _accId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ChecklistHandlerEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ChecklistHandlerEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("checklistHandlerId", _checklistHandlerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("checkListId", _checkListId);
		_columnOriginalValues.put("accId", _accId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("checklistHandlerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("checkListId", 8L);

		columnBitmasks.put("accId", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ChecklistHandlerEntry _escapedModel;

}